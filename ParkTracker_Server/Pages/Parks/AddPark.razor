@page "/addpark"
@page "/addpark/create"
@page "/addpark/edit/{Id:int}"
@using Models
@using global::Models
@using Business.Repository.IRepository
@using Microsoft.IdentityModel.Tokens
@using ParkTracker_Server.Service.IService
@using ParkTracker_Server.Helper
@inject IParkRepository ParkRepository
@inject IParkImageRepository ParkImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<section>
    <div>
        <EditForm Model="ParkModel" OnValidSubmit="HandleParkCreateAdmin" class="form-control bg-light px-4 pb-4">
            <DataAnnotationsValidator/>
            <h3 class="text-success bg-light py-3">Add a Park</h3>
            <span class="text-danger mb-5">* Required</span>
            <div class="mt-2 mb-3">
                <label>Name of Park <span class="text-danger">*</span></label>
                <InputText 
                       class="form-control"
                       @bind-Value="@ParkModel.Name"
                />
            </div>
            <div class="mb-3">
                <label>State <span class="text-danger">*</span></label>
                <select @bind-value="@ParkModel.State" @bind-value:event="onchange" class="form-select" style="max-width: 200px;">
                    @foreach (var state in States)
                    {
                        <option value="@state">@state</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label>Description <span class="text-danger">*</span></label>
                <InputTextArea
                    class="form-control"
                    @bind-Value="@ParkModel.Description"
                />
            </div>
            <div class="mb-3">
                <label>Select if there a Fee <span class="text-danger">*</span></label>
                <InputCheckbox
                    class="form-check-input"
                    @bind-Value="@ParkModel.Fee"
                />
            </div> 
           
            <button class="btn btn-success">@SaveBtnText</button>
        </EditForm>
    </div>

</section>



@code {

    [Parameter]
    public int? Id { get; set; }
    private ParkDto ParkModel { get; set; } = new ParkDto();
    private string Title { get; set; } = "Create";
    private string SaveBtnText { get; set; } = "Add";
    private ParkImageDto ParkImage { get; set; } = new ParkImageDto();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            // Editing Functionality
            Title = "Edit Room";
            SaveBtnText = "Update";
            ParkModel = await ParkRepository.GetPark(Id.Value);
            //if (ParkModel?.ParkImages != null)
            //{
            //    ParkModel.ImageUrls = ParkModel.ParkImages.Select(u => u.ParkImageUrl).ToList();
            //}
        }
        else
        {
            // Create Room Functionality
            ParkModel = new ParkDto();
        }
    }

    private async Task HandleParkCreateAdmin()
    {
        try
        {
            var parkDetailsByName = await ParkRepository.DuplicateParkNameCheck(ParkModel.Name, ParkModel.Id);
            if (parkDetailsByName != null)
            {
                await JsRuntime.ToastrError("Park Name already Exists.");
                return;
            }

            if (ParkModel.Id != 0 && Title == "Edit Room")
            {
                var updateParkData = await ParkRepository.UpdatePark(ParkModel.Id, ParkModel);
                //if (ParkModel.ImageUrls != null && ParkModel.ImageUrls.Any())
                //{
                //    await AddParkImage(updateParkData);
                //}
                await JsRuntime.ToastrSuccess("Park has been successfully updated!");
            }
            else
            {
    // Create
                var createdResult = await ParkRepository.CreatePark(ParkModel);
                //await AddParkImage(createdResult);
                await JsRuntime.ToastrSuccess("New Room has been created.");
            }
        }
        catch(Exception ex)
        {
            // Log Exceptions
        }

        NavigationManager.NavigateTo("/");
    }

    //private async Task HandleImageUpload(InputFileChangeEventArgs e)
    //{
    //    try
    //    {
    //        var images = new List<string>();
    //        if (e.GetMultipleFiles().Count > 0)
    //        {
    //            foreach (var file in e.GetMultipleFiles())
    //            {
    //                System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
    //                if (fileInfo.Extension.ToLower() == ".jpg" ||
    //                    fileInfo.Extension.ToLower() == ".jpg" ||
    //                    fileInfo.Extension.ToLower() == ".jpg")
    //                {
    //                    var uploadedImagePath = await FileUpload.UploadFile(file);
    //                    images.Add(uploadedImagePath);
    //                }
    //                else
    //                {
    //                    await JsRuntime.ToastrError("Please select .jpg, .jpeg, or .png file type.");
    //                    return;
    //                }
    //            }

    //            if (images.Any())
    //            {
    //                if (ParkModel.ImageUrls != null && ParkModel.ImageUrls.Any())
    //                {
    //                    ParkModel.ImageUrls.AddRange(images);
    //                }
    //                else
    //                {
    //                    ParkModel.ImageUrls = new List<string>();
    //                    ParkModel.ImageUrls.AddRange(images);
    //                }
    //            }
    //            else
    //            {
    //                ParkModel.ImageUrls = new List<string>();
    //                ParkModel.ImageUrls.AddRange(images);
    //            }
    //        }
    //        else
    //        {
    //            await JsRuntime.ToastrError("Image Upload Failed!");
    //            return;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.ToastrError(ex.Message);
    //    }
    //}

    //private async Task AddParkImage(ParkDto parkDetails)
    //    {
    //        foreach (var imageUrl in ParkModel.ImageUrls)
    //        {
    //            ParkImage = new ParkImageDto()
    //            {
    //                ParkId = parkDetails.Id,
    //                ParkImageUrl = imageUrl
    //            };
    //            await ParkImageRepository.CreateParkImage(ParkImage);
    //        }
    //    }


    private async Task ToastSuccess()
    {
        await JsRuntime.ToastrSuccess("Success From The ToastSuccess Task");
    } 
    private async Task ToastFailure()
    {
        await JsRuntime.ToastrError("Success From The ToastSuccess Task");
    }


    string[] States = new[]
    {
        "",
        "Alabama",
        "Alaska",
        "Arizona",
        "Arkansas",
        "California",
        "Colorado",
        "Connecticut",
        "Delaware",
        "Florida",
        "Georgia",
        "Hawaii",
        "Idaho",
        "Illinois",
        "Indiana",
        "Iowa",
        "Kansas",
        "Kentucky",
        "Louisiana",
        "Maine",
        "Maryland",
        "Massachusetts",
        "Michigan",
        "Minnesota",
        "Mississippi",
        "Missouri",
        "Montana",
        "Nebraska",
        "Nevada",
        "New Hampshire",
        "New Jersey",
        "New Mexico",
        "New York",
        "North Carolina",
        "North Dakota",
        "Ohio",
        "Oklahoma",
        "Oregon",
        "Pennsylvania",
        "Rhode Island",
        "South Carolina",
        "South Dakota",
        "Tennessee",
        "Texas",
        "Utah",
        "Vermont",
        "Virginia",
        "Washington",
        "West Virginia",
        "Wisconsin",
        "Wyoming",
    };

}
