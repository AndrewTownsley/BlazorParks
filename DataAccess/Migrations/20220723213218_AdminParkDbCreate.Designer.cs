// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220723213218_AdminParkDbCreate")]
    partial class AdminParkDbCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Data.AdminPark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CampingFee")
                        .HasColumnType("bit");

                    b.Property<bool>("CampingReservationNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FeePrice")
                        .HasColumnType("float");

                    b.Property<bool>("HasAvalanchDanger")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBCSkiing")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBoating")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCamping")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFishing")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIceFishing")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSeasonalClosures")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWaterAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWinterSports")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCold")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDesert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ParkReservationNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdminParks");
                });

            modelBuilder.Entity("DataAccess.Data.Park", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Fee")
                        .HasColumnType("bit");

                    b.Property<double?>("FeePrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerrainFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("DataAccess.Data.ParkImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ParkId")
                        .HasColumnType("int");

                    b.Property<string>("ParkImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.ToTable("ParkImages");
                });

            modelBuilder.Entity("DataAccess.Data.ParkImage", b =>
                {
                    b.HasOne("DataAccess.Data.Park", "Park")
                        .WithMany("ParkImages")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Park");
                });

            modelBuilder.Entity("DataAccess.Data.Park", b =>
                {
                    b.Navigation("ParkImages");
                });
#pragma warning restore 612, 618
        }
    }
}
